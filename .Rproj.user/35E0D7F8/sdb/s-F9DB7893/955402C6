{
    "contents" : "# server.R\nrequire(jsonlite)\nrequire(RCurl)\nrequire(ggplot2)\nrequire(dplyr)\nrequire(tidyr)\nrequire(shiny)\nrequire(leaflet)\nrequire(shinydashboard)\nrequire(DT)\n\nshinyServer(function(input, output) {\n  \n  df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query=\"select * from BNKMKTG\"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_rm46926', PASS='orcl_rm46926', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))\n  \n  output$scatterPlot <- renderPlot({\n    # Start your code here.\n    # Here is the scatter plot\n    \n    Lower_Tail_Percent = input$LowerTail     \n    Upper_Tail_Percent = input$UpperTail\n    \n    if (input$OutcomeSelectionFilter == 1)\n      ofilter = 'Lower Tail'\n    else if (input$OutcomeSelectionFilter == 2)\n      ofilter = 'Upper Tail'\n    else\n      ofilter = 'All'\n  \n    if(ofilter == 'All')\n      sdf <- df %>% mutate(DURATIONPERCENT = ntile(DURATION, 100)) %>% arrange(DURATIONPERCENT) %>% select(POUTCOME, DURATION, Y, DURATIONPERCENT) \n    #View(pd) # Uncomment to view the results\n    if(ofilter == 'Lower Tail')\n      #This shows below the 20th percentile for call duration during the Marketing campaign \n      sdf <- df %>% mutate(DURATIONPERCENT = ntile(DURATION, 100)) %>% arrange(DURATIONPERCENT) %>% select(POUTCOME, DURATION, Y, DURATIONPERCENT) %>% filter(DURATIONPERCENT < Lower_Tail_Percent) \n    #View(npd) # Uncomment to view the results\n    if(ofilter == 'Upper Tail')\n      #This shows above the 80th percentile for call duration during the Marketing campaign \n      sdf <- df %>% mutate(DURATIONPERCENT = ntile(DURATION, 100)) %>% arrange(DURATIONPERCENT) %>% select(POUTCOME, DURATION, Y, DURATIONPERCENT) %>% filter(DURATIONPERCENT > Upper_Tail_Percent) \n    \n    \n    plot1 <- ggplot() + \n      coord_cartesian() + \n      scale_x_continuous() +\n      scale_y_discrete() +\n      facet_grid(Y~.) +\n      labs(title='Portuguese Bank Marketing Campaign Effectiveness') +\n      labs(x=\"Duration\", y=paste(\"Past Marketing Effectiveness\")) +\n      layer(data=sdf, \n            mapping=aes(x=as.numeric(as.character(DURATION)), y=as.character(POUTCOME), color=Y), \n            stat=\"identity\",\n            stat_params=list(),\n            geom=\"point\",\n            geom_params=list(alpha=.8), \n            position=position_jitter(width=0, height=0.3)\n      )\n    # End your code here.\n    return(plot1)\n  })\n  \n  output$barPlot <- renderPlot({\n    # Start your code here.\n    # Here is the bar chart\n    \n    plottitle = \"Portuguese Bank Marketing Campaign Effectiveness\\nBar Chart Blended:\"\n    dfbl <-\n      data.frame(fromJSON(getURL(\n        URLencode(\n          gsub(\n            \"\\n\", \" \", 'skipper.cs.utexas.edu:5001/rest/native/?query=\n            \"\"\"select JOB_TYPE as job_name, \\\\\\'AVERAGE_SALARY\\\\\\' as measure_names, \n            sum(AVERAGE_SALARY) as measure_values \n            from JOBTYPE\n            group by JOB_TYPE\n            union all\n            select JOB as job_name, \\\\\\'CAMPAIGN\\\\\\' as measure_names, sum(CAMPAIGN) as measure_values from BNKMKTG\n            group by JOB;\"\"\"'\n          )\n          ), httpheader = c(\n            DB = 'jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER =\n              'C##cs329e_rm46926', PASS = 'orcl_rm46926', MODE = 'native_mode', MODEL = 'model', returnDimensions = 'False', returnFor = 'JSON'\n        ), verbose = TRUE\n      ))); #View(dfbl)\n    \n    # Rearranges measure_names into usable columns\n   \n    \n    \n    if (input$BarchartSorting == 1) {\n      ndfbl <- spread(dfbl, MEASURE_NAMES, MEASURE_VALUES) %>% arrange(desc(AVERAGE_SALARY))\n      # Creates an ordered column of job type to be used for ordering in ggplot\n      ndfbl$ORDERED_JOBS <- reorder(ndfbl$JOB_NAME, ndfbl$AVERAGE_SALARY)}\n    else if (input$BarchartSorting == 2) {\n      ndfbl <- spread(dfbl, MEASURE_NAMES, MEASURE_VALUES) %>% arrange(desc(CAMPAIGN))\n      # Creates an ordered column of job type to be used for ordering in ggplot\n      ndfbl$ORDERED_JOBS <- reorder(ndfbl$JOB_NAME, ndfbl$CAMPAIGN)}\n\n    #dfb <- inner_join(dfb, dfb1, by=\"POUTCOME\")\n    \n    #spread(dfb, Y, AVG_CAMPAIGN) %>% View\n    \n    plot2 <- ggplot() +\n      coord_cartesian() +\n      scale_x_discrete() +\n      scale_y_continuous(limits = c(0,100000)) +\n      scale_fill_gradient(low = \"grey90\", high = \"darkgreen\", na.value = \"grey90\", guide = \"colourbar\") +\n      labs(title = 'Portuguese Bank Marketing Campaign Effectiveness\\nBlending') +\n      labs(x = paste(\"JOB TYPE\"), y = paste(\"AVERAGE SALARY\")) +\n      theme(panel.background=element_rect(fill='grey100')) +\n      layer(\n        data = ndfbl,\n        mapping = aes(x = ORDERED_JOBS, y = AVERAGE_SALARY, fill = CAMPAIGN),\n        stat = \"identity\",\n        stat_params = list(),\n        geom = \"bar\",\n        geom_params = list(width=.5),\n        position = position_identity()\n      ) +\n      layer(\n        data = ndfbl,\n        mapping = aes(\n          x = ORDERED_JOBS, y = AVERAGE_SALARY, label = round(CAMPAIGN)\n        ),\n        stat = \"identity\",\n        stat_params = list(),\n        geom = \"text\",\n        geom_params = list(colour = \"black\", hjust = -0.1),\n        position = position_identity()\n      ) + coord_flip() \n    # End your code here.\n    return(plot2)\n  })\n\n  output$crosstabPlot <- renderPlot({\n# Start your code here.\n\n# Here is the Crosstab and KPI\n    \nKPI_Low_Max_value = input$KPI1     \nKPI_Medium_Max_value = input$KPI2\n    \n#df %>% group_by(JOB) %>% summarize() %>% View()\n\ndfc <- df %>% mutate(Yyes = ifelse(Y == 'yes', 1, 0), Yno = ifelse(Y == 'no', 1, 0)) %>% group_by(EDUCATION) %>% mutate(Ratio = sum(Yyes)/sum(Yno)) %>% ungroup() %>% group_by(EDUCATION, Y, HOUSING) %>% summarize(AVG_DURATION = round(mean(DURATION),1), Ratio = mean(Ratio)) %>% mutate(KPI = ifelse(Ratio <= KPI_Low_Max_value, '03 Low', ifelse(Ratio <= KPI_Medium_Max_value, '02 Medium', '01 High')))\n\n#spread(dfc, Y, AVG_DURATION) %>% View\n\ndfc$EDUCATION <- factor(dfc$EDUCATION, levels = c(\"illiterate\", \"basic4y\", \"basic6y\", \"basic9y\", \"highschool\", \"universitydegree\", \"professionalcourse\", \"unknown\"))\n    \nplot3 <- ggplot() + \n  coord_cartesian() + \n  scale_x_discrete() +\n  scale_y_discrete() +\n  scale_fill_manual(values = c(\"green\",\"yellow\",\"red\")) + \n  facet_grid(.~EDUCATION) + \n  labs(title='Portuguese Bank Marketing Campaign Effectiveness\\nCrosstab\\nAVG_DURATION') +\n  labs(x=paste(\"EDUCATION/Y\"), y=paste(\"HOUSING\")) +\n  layer(data=dfc, \n        mapping=aes(x=Y, y=HOUSING, label=AVG_DURATION), \n        stat=\"identity\", \n        stat_params=list(), \n        geom=\"text\",\n        geom_params=list(colour=\"black\", size=2.8), \n        position=position_identity()\n  ) +\n  layer(data=dfc, \n        mapping=aes(x=Y, y=HOUSING, fill=KPI), \n        stat=\"identity\", \n        stat_params=list(), \n        geom=\"tile\",\n        geom_params=list(alpha=0.50), \n        position=position_identity()\n  )\n\n# End your code here.\n      return(plot3)\n  })\n  \n  output$blendedPlot <- renderPlot({\n    # Start your code here.\n    # Here is the blended bar chart\n    \n    plottitle = \"Portuguese Bank Marketing Campaign Effectiveness\\nBlending\\nAVG_SALARY:\"\n    dfbl <-\n      data.frame(fromJSON(getURL(\n        URLencode(\n          gsub(\n            \"\\n\", \" \", 'skipper.cs.utexas.edu:5001/rest/native/?query=\n            \"\"\"select JOB_TYPE as job_name, \\\\\\'AVERAGE_SALARY\\\\\\' as measure_names, \n            sum(AVERAGE_SALARY) as measure_values \n            from JOBTYPE\n            group by JOB_TYPE\n            union all\n            select JOB as job_name, \\\\\\'CAMPAIGN\\\\\\' as measure_names, sum(CAMPAIGN) as measure_values from BNKMKTG\n            group by JOB;\"\"\"'\n          )\n          ), httpheader = c(\n            DB = 'jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER =\n              'C##cs329e_rm46926', PASS = 'orcl_rm46926', MODE = 'native_mode', MODEL = 'model', returnDimensions = 'False', returnFor = 'JSON'\n        ), verbose = TRUE\n      ))); #View(dfbl)\n    \n    # Rearranges measure_names into usable columns\n    ndfbl <- spread(dfbl, MEASURE_NAMES, MEASURE_VALUES) %>% arrange(desc(AVERAGE_SALARY))\n    \n    # Creates an ordered column of job type to be used for ordering in ggplot\n    ndfbl$ORDERED_JOBS <- reorder(ndfbl$JOB_NAME, ndfbl$AVERAGE_SALARY)\n    \n    plot4 <- ggplot() +\n      coord_cartesian() +\n      scale_x_discrete() +\n      scale_y_continuous(limits = c(0,100000)) +\n      scale_fill_gradient(low = \"grey90\", high = \"darkgreen\", na.value = \"grey90\", guide = \"colourbar\") +\n      labs(title = 'Portuguese Bank Marketing Campaign Effectiveness\\nBlending\\nAVG_SALARY') +\n      labs(x = paste(\"JOB TYPE\"), y = paste(\"AVERAGE SALARY\")) +\n      theme(panel.background=element_rect(fill='grey100')) +\n      layer(\n        data = ndfbl,\n        mapping = aes(x = ORDERED_JOBS, y = AVERAGE_SALARY, fill = CAMPAIGN),\n        stat = \"identity\",\n        stat_params = list(),\n        geom = \"bar\",\n        geom_params = list(width=.5),\n        position = position_identity()\n      ) +\n      layer(\n        data = ndfbl,\n        mapping = aes(\n          x = ORDERED_JOBS, y = AVERAGE_SALARY, label = round(CAMPAIGN)\n        ),\n        stat = \"identity\",\n        stat_params = list(),\n        geom = \"text\",\n        geom_params = list(colour = \"black\", hjust = -0.1),\n        position = position_identity()\n      ) + coord_flip() \n    \n    # End your code here.\n    return(plot4)\n  })\n})\n",
    "created" : 1449535520339.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3241740592",
    "id" : "955402C6",
    "lastKnownWriteTime" : 1449532375,
    "path" : "~/Desktop/Desktop/UT/Fall 2015/Data Visualization/DV_FinalProject/04 Shiny/server.R",
    "project_path" : "04 Shiny/server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}